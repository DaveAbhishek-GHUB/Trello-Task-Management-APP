// Add these imports at the top
import { DndContext, closestCorners } from '@dnd-kit/core';
import { SortableContext, verticalListSortingStrategy } from '@dnd-kit/sortable';
import DraggableCard from './DraggableCard';

// Add this to your existing imports from userSlice
import { MoveCard } from "../store/slices/userSlice";

// Inside your HomePage component, add this function
const handleDragEnd = (event) => {
  const { active, over } = event;
  
  if (!over) return;

  const activeId = parseInt(active.id);
  const overId = parseInt(over.id);
  
  // Find the source and destination lists
  let sourceListId, destinationListId;
  lists.forEach(list => {
    list.cards.forEach(card => {
      if (card.id === activeId) {
        sourceListId = list.id;
      }
    });
  });

  lists.forEach(list => {
    if (list.cards.some(card => card.id === overId)) {
      destinationListId = list.id;
    }
  });

  if (sourceListId && destinationListId) {
    dispatch(MoveCard({
      boardID: boardId,
      sourceListID: sourceListId,
      destinationListID: destinationListId,
      cardID: activeId
    }));
  }
};

// Modify your list rendering section to include DndContext
return (
  <DndContext
    collisionDetection={closestCorners}
    onDragEnd={handleDragEnd}
  >
    <div className="list-wrapper w-full h-[60vw] flex gap-[1.7vw] p-4 overflow-auto max-md:flex-col max-md:h-auto">
      {updateBoard ? (
        lists.map((list) => (
          <div key={list.id} className="inner-list-wrapper">
            <div className="list w-[18vw] bg-blue-800 rounded-xl shadow-lg max-md:w-full">
                      <div className="list-heading-wrapper flex items-center justify-between text-white text-base px-4 py-3 border-b border-blue-700">
                        <span className="font-semibold truncate">
                          {list.name}
                        </span>
                        <button
                          onClick={() => {
                            setListId(list.id);
                            setIsAddCard(true);
                          }}
                          className="text-sm bg-blue-700 text-white px-3 py-1.5 rounded-md hover:bg-blue-600 transition-colors"
                        >
                          Add Card
                        </button>
                      </div>
              <SortableContext
                items={list.cards.map(card => card.id.toString())}
                strategy={verticalListSortingStrategy}
              >
                <div className="card px-4 py-3 flex flex-col gap-2.5">
                  {list.cards.map((card) => (
                    <DraggableCard
                      key={card.id}
                      card={card}
                      onEdit={handleEditCard}
                      onDelete={handleDeleteCard}
                    />
                  ))}
                  <div
                            key={card.id}
                            className="card py-2.5 bg-white rounded-xl text-black px-4 hover:bg-gray-50 transition-colors text-sm flex justify-between items-center shadow-sm"
                          >
                            <button
                              onClick={() => handleEditCard(card)}
                              className="text-left flex-1 truncate hover:text-blue-800"
                            >
                              {card.name}
                            </button>
                            <button
                              onClick={() => handleDeleteCard(card.id)}
                              className="text-gray-400 hover:text-red-500 transition-colors ml-2"
                              aria-label="Delete card"
                            >
                              <svg
                                xmlns="http://www.w3.org/2000/svg"
                                viewBox="0 0 24 24"
                                width={20}
                                height={20}
                                fill="none"
                                stroke="currentColor"
                                strokeWidth="1.5"
                                strokeLinecap="round"
                              >
                                <path d="M19.5 5.5L18.8803 15.5251C18.7219 18.0864 18.6428 19.3671 18.0008 20.2879C17.6833 20.7431 17.2747 21.1273 16.8007 21.416C15.8421 22 14.559 22 11.9927 22C9.42312 22 8.1383 22 7.17905 21.4149C6.7048 21.1257 6.296 20.7408 5.97868 20.2848C5.33688 19.3626 5.25945 18.0801 5.10461 15.5152L4.5 5.5" />
                                <path d="M3 5.5H21M16.0557 5.5L15.3731 4.09173C14.9196 3.15626 14.6928 2.68852 14.3017 2.39681C14.215 2.3321 14.1231 2.27454 14.027 2.2247C13.5939 2 13.0741 2 12.0345 2C10.9688 2 10.436 2 9.99568 2.23412C9.8981 2.28601 9.80498 2.3459 9.71729 2.41317C9.32164 2.7167 9.10063 3.20155 8.65861 4.17126L8.05292 5.5" />
                                <path d="M9.5 16.5L9.5 10.5" />
                                <path d="M14.5 16.5L14.5 10.5" />
                              </svg>
                            </button>
                          </div>
                </div>
              </SortableContext>
            </div>
          </div>
        ))
      ) : (
        ""
      )}
    </div>
  </DndContext>
);















<DndContext
  collisionDetection={closestCorners}
  onDragEnd={handleDragEnd}
>
  <div className="list-wrapper w-full h-[60vw] flex gap-[1.7vw] p-4 overflow-auto max-md:flex-col max-md:h-auto">
    {updateBoard ? (
      lists.map((list) => (
        <div key={list.id} className="inner-list-wrapper">
          <div className="list w-[18vw] bg-blue-800 rounded-xl shadow-lg max-md:w-full">
            <div className="list-heading-wrapper">
                                          <div className="list-heading-wrapper flex items-center justify-between text-white text-base px-4 py-3 border-b border-blue-700">
                              <span className="font-semibold truncate">
                                {list.name}
                              </span>
                              <button
                                onClick={() => {
                                  setListId(list.id);
                                  setIsAddCard(true);
                                }}
                                className="text-sm bg-blue-700 text-white px-3 py-1.5 rounded-md hover:bg-blue-600 transition-colors"
                              >
                                Add Card
                              </button>
                            </div>
            </div>
            <SortableContext
              items={list.cards.map(card => card.id.toString())}
              strategy={verticalListSortingStrategy}
            >
              <div className="card px-4 py-3 flex flex-col gap-2.5">
                {list.cards.map((card) => (
                  <DraggableCard
                    key={card.id}
                    card={card}
                    onEdit={handleEditCard}
                    onDelete={handleDeleteCard}
                  />
                ))}
                                                {isAddCard && listId === list.id && (
                                  <form
                                    className="w-full flex gap-2 items-start mt-2"
                                    onSubmit={handleSubmit(onSubmitCard)}
                                  >
                                    <div className="flex-1">
                                      <input
                                        className="w-full px-3 py-2 text-sm border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                        placeholder="Enter card name"
                                        type="text"
                                        {...register("cardname", {
                                          required: "Card name is required",
                                          minLength: {
                                            value: 1,
                                            message:
                                              "Card name must not be empty",
                                          },
                                          validate: (value) =>
                                            value.trim().length > 0 ||
                                            "Card name cannot be just whitespace",
                                        })}
                                      />
                                      {errors.cardname && (
                                        <p className="text-xs text-red-500 mt-1">
                                          {errors.cardname.message}
                                        </p>
                                      )}
                                    </div>
                                    <button
                                      type="submit"
                                      className="text-sm bg-blue-800 text-white px-4 py-2 rounded-md hover:bg-blue-700 transition-colors whitespace-nowrap"
                                    >
                                      Add
                                    </button>
                                  </form>
                                )}
              </div>
            </SortableContext>
          </div>
        </div>
      ))
    ) : null}
  </div>
</DndContext>
































import React, { useEffect, useState } from "react";
import { 
  DndContext, 
  closestCorners, 
  KeyboardSensor,
  PointerSensor,
  useSensor,
  useSensors
} from "@dnd-kit/core";
import {
  SortableContext,
  verticalListSortingStrategy,
  sortableKeyboardCoordinates
} from "@dnd-kit/sortable";

function HomePage() {
  const dispatch = useDispatch();
  const sensors = useSensors(
    useSensor(PointerSensor),
    useSensor(KeyboardSensor, {
      coordinateGetter: sortableKeyboardCoordinates,
    })
  );

  const handleDragEnd = (event) => {
    const { active, over } = event;
    
    if (!over) return;

    // Extract list and card IDs from drag event
    const activeListId = active.data.current?.listId;
    const overListId = over.data.current?.listId;
    const activeCardId = active.id;
    const overCardId = over.id;

    // Ensure we're dragging cards within the same board
    if (activeListId && overListId) {
      if (activeListId === overListId) {
        // Reorder within the same list
        const activeIndex = lists
          .find(list => list.id === activeListId)
          .cards.findIndex(card => card.id === activeCardId);
        
        const overIndex = lists
          .find(list => list.id === overListId)
          .cards.findIndex(card => card.id === overCardId);

        dispatch(MoveCard({
          boardID: boardId,
          sourceListID: activeListId,
          destinationListID: activeListId,
          cardID: activeCardId,
          oldIndex: activeIndex,
          newIndex: overIndex
        }));
      } else {
        // Move between lists
        dispatch(MoveCard({
          boardID: boardId,
          sourceListID: activeListId,
          destinationListID: overListId,
          cardID: activeCardId
        }));
      }
    }
  };

  return (
    <DndContext 
      sensors={sensors}
      collisionDetection={closestCorners} 
      onDragEnd={handleDragEnd}
    >
      <div className="list-wrapper w-full h-[60vw] flex gap-[1.7vw] p-4 overflow-auto max-md:flex-col max-md:h-auto">
        {lists.map((list) => (
          <div key={list.id} className="inner-list-wrapper">
            <div className="list w-[18vw] bg-blue-800 rounded-xl shadow-lg max-md:w-full">
              <SortableContext 
                items={list.cards.map(card => card.id.toString())}
                strategy={verticalListSortingStrategy}
              >
                <div className="card px-4 py-3 flex flex-col gap-2.5">
                  {list.cards.map((card) => (
                    <DraggableCard
                      key={card.id}
                      card={card}
                      listId={list.id}
                      onEdit={handleEditCard}
                      onDelete={handleDeleteCard}
                    />
                  ))}
                </div>
              </SortableContext>
            </div>
          </div>
        ))}
      </div>
    </DndContext>
  );
}






// Change this part in your HomePage component
// Current incorrect implementation:
const sensors = useSensor(
  useSensor(PointerSensor),
  useSensor(KeyboardSensor, {
    coordinateGetter: sortableKeyboardCoordinates,
  })
);

// Fix it to:
const sensors = useSensors(
  useSensor(PointerSensor),
  useSensor(KeyboardSensor, {
    coordinateGetter: sortableKeyboardCoordinates,
  })
);









              <DndContext
                collisionDetection={closestCorners}
                onDragEnd={handleDragEnd}
              >
                <div className="list-wrapper w-full h-[60vw] flex gap-[1.7vw] p-4 overflow-auto max-md:flex-col max-md:h-auto">
                  {updateBoard
                    ? lists.map((list) => (
                        <div key={list.id} className="inner-list-wrapper">
                          <div className="list w-[18vw] bg-blue-800 rounded-xl shadow-lg max-md:w-full">
                            <div className="list-heading-wrapper">
                              <div className="list-heading-wrapper flex items-center justify-between text-white text-base px-4 py-3 border-b border-blue-700">
                                <span className="font-semibold truncate">
                                  {list.name}
                                </span>
                                <button
                                  onClick={() => {
                                    setListId(list.id);
                                    setIsAddCard(true);
                                  }}
                                  className="text-sm bg-blue-700 text-white px-3 py-1.5 rounded-md hover:bg-blue-600 transition-colors"
                                >
                                  Add Card
                                </button>
                              </div>
                            </div>
                            <SortableContext
                              items={list.cards.map((card) =>
                                card.id.toString()
                              )}
                              strategy={verticalListSortingStrategy}
                            >
                              <div className="card px-4 py-3 flex flex-col gap-2.5">
                                {list.cards.map((card) => (
                                  <DraggableCard
                                    key={card.id}
                                    card={card}
                                    onEdit={handleEditCard}
                                    onDelete={handleDeleteCard}
                                  />
                                ))}
                                {isAddCard && listId === list.id && (
                                  <form
                                    className="w-full flex gap-2 items-start mt-2"
                                    onSubmit={handleSubmit(onSubmitCard)}
                                  >
                                    <div className="flex-1">
                                      <input
                                        className="w-full px-3 py-2 text-sm border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                        placeholder="Enter card name"
                                        type="text"
                                        {...register("cardname", {
                                          required: "Card name is required",
                                          minLength: {
                                            value: 1,
                                            message:
                                              "Card name must not be empty",
                                          },
                                          validate: (value) =>
                                            value.trim().length > 0 ||
                                            "Card name cannot be just whitespace",
                                        })}
                                      />
                                      {errors.cardname && (
                                        <p className="text-xs text-red-500 mt-1">
                                          {errors.cardname.message}
                                        </p>
                                      )}
                                    </div>
                                    <button
                                      type="submit"
                                      className="text-sm bg-blue-800 text-white px-4 py-2 rounded-md hover:bg-blue-700 transition-colors whitespace-nowrap"
                                    >
                                      Add
                                    </button>
                                  </form>
                                )}
                              </div>
                            </SortableContext>
                          </div>
                        </div>
                      ))
                    : null}
                </div>
              </DndContext>
